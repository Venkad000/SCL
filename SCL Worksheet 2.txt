SCIENTIFIC COMPUTING LAB
                                WORKSHEET 2
                                                                        20PT06




1.Find eigen values and eigen vectors:


        import numpy as np


m = int(input("Enter the order of the square matrix : "))
matrix = list()




def determinant_recursive(A, total=0):
        indices = list(range(len(A)))
         
        if len(A) == 2 and len(A[0]) == 2:
            val = A[0][0] * A[1][1] - A[1][0] * A[0][1]
            return val
 
        for fc in indices:
            As = A.copy()
            As = As[1:]
            height = len(As)
 
            for i in range(height):
                As[i] = As[i][0:fc] + As[i][fc+1:]
 
            sign = (-1) ** (fc % 2)
            sub_det = determinant_recursive(As)
            total += sign * A[0][fc] * sub_det
        return total


for i in range(m):
        temp = list()
        for j in range(m):
            temp.append(int(input("Enter matrix[{}][{}] : ".format(i,j))))
        matrix.append(temp.copy())
        temp.clear()


eig = list()
if m == 2:
        b = -(matrix[0][0]+matrix[1][1])
        a = 1
        c = (matrix[0][0]*matrix[1][1]) - (matrix[0][1]*matrix[1][0])
        eig.append((-b + (b**2 - (4*a*c))**(1/2))/(2*a))
        eig.append((-b - (b**2 - (4*a*c))**(1/2))/(2*a))


elif m == 3:
        trace = sum([matrix[i][i] for i in range(m)])
        som = (matrix[1][1]*matrix[2][2]-matrix[1][2]*matrix[2][1]) + (matrix[0][0]*matrix[2][2]-matrix[0][2]*matrix[2][0]) + (matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0])
        det = determinant_recursive(matrix)
        a = 1
        coeff = [a,-1*trace,som,-1*det]
        eig = np.roots(coeff)
   
print(eig)






2.Diagonalize the matrix:


        import sympy as sp


x = sp.var('x')


def Symmetric(a, n):
        for i in range(n):
            for j in range(n):
                if (a[i,j] != a[j,i]):
                    return False
        return True


def CalculateRank(A):


        count = 0
        M = [0,0,0,0]
        for i in range(len(A)):
            if A[i] != M:
                count = count+1
            else:
                return count


def GaussJordan(arr):


        i = 0
        j = 0
        pos = 0


        while i<len(arr):
            if arr[i][0] != 0:
                arr[pos],arr[i] = arr[i],arr[pos]
                break
            else:
                i = i+1


        for i in range(0,len(arr)):
            for j in range(0,len(arr[0])):
                if(arr[i][j] != 0):
                    for k in range(0,len(arr)):
                        if i != k:
                            c = arr[k][j]/arr[i][j]
                            for l in range(0,len(arr[k])):
                                arr[k][l] = arr[k][l]-c*arr[i][l]
                    break
        return arr


def CalculateEigenVectors(A,l,count):


        length = A.shape[0]
        I = sp.eye(length)
        Z = I.multiply(l)
        H = A-Z
        P = sp.Matrix([[0],[0],[0]])
        H1 = H.col_insert(3,P)
        P1 = GaussJordan(H1.tolist())
        C = CalculateRank(P1)
        J = H.nullspace()
        if(length-C == len(J)):
            count = count+1
        return count
    
def CalculateEigenValues(A):


        count = 0
        length = A.shape[0]
        I = sp.eye(length)
        Z = I.multiply(x)
        H = A-Z
        DET = H.det()
        L = sp.solve(DET,x)
    
        for i in L:
            count = CalculateEigenVectors(A,i,count)
        if(count==A.shape[0] or Symmetric(A, 3)):
            print("{} is Diagonalizable".format(A.tolist()),end="\n\n")
        else:
            print("{} is Not Diagonalizable".format(A.tolist()),end="\n\n")


def main():


        A = sp.Matrix([[-10,11,-6],[-15,16,-10],[-3,3,-2]])
        B = sp.Matrix([[3,-1,0],[-1,2,-1],[0,-1,3]])
        C = sp.Matrix([[1,-7,-1],[0,1,0],[0,15,-2]])


        CalculateEigenValues(A)
        CalculateEigenValues(B)
        CalculateEigenValues(C)




main()






3.Quadratic to canonical form:
        


        import sympy as sp
import numpy as np


x = sp.var('x')
y = sp.var('y')
z = sp.var('z')


def CalculateEigenVectors(A,l):
    
        length = A.shape[0]
        I = sp.eye(length)
        Z = I.multiply(l)
        H = A-Z
        J = H.nullspace()
        return J
    
def CalculateEigenValues(A):


        length = A.shape[0]
        I = sp.eye(length)
        Z = I.multiply(x)
        H = A-Z
        DET = H.det()
        L = sp.solve(DET,x)
        l = []
        for i in L:
            k = CalculateEigenVectors(A,i)


            for j in range(len(k)):
                l.append(k[j].tolist())


        M = np.empty((A.shape[0],len(l)))


        for i in range(len(l)):
            for j in range(A.shape[0]):
                M[j][i] = l[i][j][0]


        N = np.linalg.inv(M)
        K = N.dot(A)
        K = K.dot(M)
    
        print("\nSymmetric matrix after Diagonalisation: ")
        return (K.astype(int))
    
def main():    
    
        n = int(input("Enter no. of variables: "))
        expr = sp.sympify(input("Enter the Quadratic form: "))
        symmetric_matrix = [[] for  i in  range(n)]
    
        if n == 2:


            symmetric_matrix[0].append(expr.coeff(x**2))
            symmetric_matrix[0].append(int(0.5*(expr.coeff(x*y))))
            symmetric_matrix[1].append(int(0.5*(expr.coeff(x*y))))
            symmetric_matrix[1].append(expr.coeff(y**2))
            print("\nSymmetric matrix for given Quadratic form is: ",symmetric_matrix)
            SYMMETRIC = sp.Matrix(symmetric_matrix)
            diag = CalculateEigenValues(SYMMETRIC)
            print(diag)
            print("\nCanonical form for given Quadratic form is: ")
            print("{}*x**2+{}*y**2".format(diag[0,0],diag[1,1]),end="\n\n")
    
        elif n == 3:
            
            symmetric_matrix[0].append(expr.coeff(x**2))
            symmetric_matrix[0].append(int(0.5*(expr.coeff(x*y))))
            symmetric_matrix[0].append(int(0.5*(expr.coeff(x*z))))
            symmetric_matrix[1].append(int(0.5*(expr.coeff(x*y))))
            symmetric_matrix[1].append(expr.coeff(y**2))
            symmetric_matrix[1].append(int(0.5*(expr.coeff(y*z))))
            symmetric_matrix[2].append(int(0.5*(expr.coeff(x*z))))
            symmetric_matrix[2].append(int(0.5*(expr.coeff(y*z))))
            symmetric_matrix[2].append(expr.coeff(z**2))
            
            print("\nSymmetric matrix for given Quadratic form is: ",symmetric_matrix)
            
            SYMMETRIC = sp.Matrix(symmetric_matrix)
            CalculateEigenValues(SYMMETRIC)
            diag = CalculateEigenValues(SYMMETRIC)
            
            print(diag)
            print("\nCanonical form for given Quadratic form is: ")
            print("{}*x**2+{}*y**2+{}*z**2".format(diag[0,0],diag[1,1],diag[2,2]),end="\n\n")
            
main()












4.Diagonalize the matrix:


        arr = np.zeros((3, 3, 3), dtype = 'int')


arr[0] = [[-10, 11, -6],
              [-15, 16, -10],
              [-3, 3, -2]]
arr[1] = [[3, -1, 0],
              [-1, 2, -1],
              [0, -1, 3]]


arr[2] = [[1, -7, -1],
              [0, 1, 0],
              [0, 15, -2]]


n = len(arr)
for i in range(n):
  if len(eigenValues(arr[i])) == n:
        print(f'{i + 1}. Diagonalizable!')
  else:
        print(f'{i + 1}. Not Diagonalizable!')






5.Dominant eigenvalue:


        
        




rayleigh= np.matmul(np.matmul(A,x),np.transpose(x))/np.matmul(x,np.transpose(x))
print("\nDominant eigen value is ",round(rayleigh,2))






6.Smallest eigenvalue:






        import numpy as np
import sys
from numpy.linalg import inv


n = int(input('Enter order of matrix: '))




a = np.zeros((n,n))


print('Enter Matrix Coefficients:')
for i in range(n):
        for j in range(n):
            a[i][j] = float(input( 'a['+str(i)+']['+ str(j)+']='))


a_inv = inv(a)
x = np.zeros((n))




print('Enter initial guess vector: ')
for i in range(n):
        x[i] = float(input( 'x['+str(i)+']='))


tolerable_error = float(input('Enter tolerable error: '))
+-


max_iteration = int(input('Enter maximum number of steps: '))




lambda_old = 1.0
condition =  True
step = 1


print("inverse power method we use matrix inverse , reciprocates the eigen value")


while condition:


        x = np.matmul(a_inv,x)
   
 
        lambda_new = max(abs(x))
   
        x = x/lambda_new
   


        print('\nSTEP %d' %(step))
        print('----------')
        print('Eigen Value = %0.4f' %(lambda_new))
        print('Eigen Vector: ')
        for i in range(n):
            print('%0.3f\t' % (x[i]))
 
        step = step + 1
        if step > max_iteration:
            print('Not convergent in given maximum iteration!')
            break
   


        error = abs(lambda_new - lambda_old)
        print('errror='+ str(error))
        lambda_old = lambda_new
        condition = error > tolerable_error